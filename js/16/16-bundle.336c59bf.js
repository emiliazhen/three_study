"use strict";(self.webpackChunkthree_study=self.webpackChunkthree_study||[]).push([[770],{8941:function(e,n,r){var o=r(9477),i=r(9365),a=r(4376);document.title="".concat(window.location.pathname.slice(1)," 水波纹");var t=new o.xsS,u=new o.cPb(75,window.innerWidth/window.innerHeight,.1,100);u.position.set(0,0,5),t.add(u);var c={waterFrequency:10,deepScale:.065,noiseFrequency:7,noiseScale:1.3,xzScale:1,lowColor:"#3077e5",highColor:"#63aee5",xSpeed:1,zSpeed:1,noiseSpeed:1,opacity:1},l=new o._12(1,1,512,512),d=new o.jyz({vertexShader:"precision lowp float;\r\n\r\nuniform float uWaterFrequency;\r\nuniform float uDeepScale;\r\nuniform float uNoiseFrequency;\r\nuniform float uNoiseScale;\r\nuniform float uXzScale;\r\nuniform float uTime;\r\nuniform float uXSpeed;\r\nuniform float uZSpeed;\r\nuniform float uNoiseSpeed;\r\n\r\n// 波动值传给片元着色器\r\nvarying float vElevation;\r\n\r\n// 随机\r\nfloat random (vec2 st) {\r\n  return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\r\n}\r\n\r\n// 噪声函数\r\nfloat noise (in vec2 _st) {\r\n    vec2 i = floor(_st);\r\n    vec2 f = fract(_st);\r\n\r\n    // Four corners in 2D of a tile\r\n    float a = random(i);\r\n    float b = random(i + vec2(1.0, 0.0));\r\n    float c = random(i + vec2(0.0, 1.0));\r\n    float d = random(i + vec2(1.0, 1.0));\r\n\r\n    vec2 u = f * f * (3.0 - 2.0 * f);\r\n\r\n    return mix(a, b, u.x) +\r\n            (c - a)* u.y * (1.0 - u.x) +\r\n            (d - b) * u.x * u.y;\r\n}\r\n\r\n\r\n//\tClassic Perlin 2D Noise \r\n//\tby Stefan Gustavson\r\n//\r\nvec4 permute(vec4 x)\r\n{\r\n    return mod(((x*34.0)+1.0)*x, 289.0);\r\n}\r\n\r\nvec2 fade(vec2 t)\r\n{\r\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\r\n}\r\n\r\nfloat cnoise(vec2 P)\r\n{\r\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\r\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\r\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\r\n    vec4 ix = Pi.xzxz;\r\n    vec4 iy = Pi.yyww;\r\n    vec4 fx = Pf.xzxz;\r\n    vec4 fy = Pf.yyww;\r\n    vec4 i = permute(permute(ix) + iy);\r\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\r\n    vec4 gy = abs(gx) - 0.5;\r\n    vec4 tx = floor(gx + 0.5);\r\n    gx = gx - tx;\r\n    vec2 g00 = vec2(gx.x,gy.x);\r\n    vec2 g10 = vec2(gx.y,gy.y);\r\n    vec2 g01 = vec2(gx.z,gy.z);\r\n    vec2 g11 = vec2(gx.w,gy.w);\r\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\r\n    g00 *= norm.x;\r\n    g01 *= norm.y;\r\n    g10 *= norm.z;\r\n    g11 *= norm.w;\r\n    float n00 = dot(g00, vec2(fx.x, fy.x));\r\n    float n10 = dot(g10, vec2(fx.y, fy.y));\r\n    float n01 = dot(g01, vec2(fx.z, fy.z));\r\n    float n11 = dot(g11, vec2(fx.w, fy.w));\r\n    vec2 fade_xy = fade(Pf.xy);\r\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\r\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\r\n    return 2.3 * n_xy;\r\n}\r\n\r\nvoid main(){\r\n  vec4 modelPosition = modelMatrix * vec4( position, 1.0 );\r\n  // 给Y方向波动值\r\n  float elevation = sin(modelPosition.x * uWaterFrequency + uTime * uXSpeed ) * sin(modelPosition.z * uWaterFrequency * uXzScale+ uTime * uZSpeed) - abs(cnoise(modelPosition.xz * uNoiseFrequency + uTime * uNoiseSpeed) * uNoiseScale);\r\n  modelPosition.y = elevation * uDeepScale;\r\n\r\n  vElevation = elevation;\r\n  // 投影矩阵 * 视图矩阵 * 模型矩阵 * 4分量坐标\r\n\r\n  gl_Position = projectionMatrix * viewMatrix * modelPosition;\r\n}",fragmentShader:"precision lowp float;\r\n\r\nuniform vec3 uLowColor;\r\nuniform vec3 uHighColor;\r\nuniform float uOpacity;\r\n\r\n// 接收顶点着色器传递过来的波动值\r\nvarying float vElevation;\r\n\r\nvoid main(){\r\n  // 根据当前波动值[-1,1]来转换成[0,1]的值\r\n  float colorValue = (vElevation + 1.0)/2.0;\r\n  // 颜色混合\r\n  vec3 color = mix(uLowColor,uHighColor,colorValue);\r\n  gl_FragColor = vec4(color, uOpacity);\r\n}",side:o.ehD,transparent:!0,uniforms:{uTime:{value:0},uWaterFrequency:{value:c.waterFrequency},uDeepScale:{value:c.deepScale},uNoiseFrequency:{value:c.noiseFrequency},uNoiseScale:{value:c.noiseScale},uXzScale:{value:c.xzScale},uLowColor:{value:new o.Ilk(c.lowColor)},uHighColor:{value:new o.Ilk(c.highColor)},uXSpeed:{value:c.xSpeed},uZSpeed:{value:c.zSpeed},uNoiseSpeed:{value:c.noiseSpeed},uOpacity:{value:c.opacity}}}),f=new o.Kj0(l,d);f.rotation.x=-Math.PI/2,t.add(f);var v=new o.CP7;v.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(v.domElement);var m=new i.z(u,v.domElement);m.enableDamping=!0;var s=new o.y8_;t.add(s);var x=new a.XS;x.add(c,"waterFrequency").min(1).max(40).step(.1).name("水波纹频率").onChange((function(e){d.uniforms.uWaterFrequency.value=e})),x.add(c,"deepScale").min(.001).max(.2).step(.001).name("水深倍率").onChange((function(e){d.uniforms.uDeepScale.value=e})),x.add(c,"noiseFrequency").min(1).max(40).step(1).name("噪声频率").onChange((function(e){d.uniforms.uNoiseFrequency.value=e})),x.add(c,"noiseScale").min(.05).max(2).step(.05).name("噪声倍率").onChange((function(e){d.uniforms.uNoiseScale.value=e})),x.add(c,"xzScale").min(.1).max(5).step(.1).name("XZ倍率").onChange((function(e){d.uniforms.uXzScale.value=e})),x.addColor(c,"lowColor").name("暗色").onFinishChange((function(e){d.uniforms.uLowColor.value=new o.Ilk(e)})),x.addColor(c,"highColor").name("亮色").onFinishChange((function(e){d.uniforms.uHighColor.value=new o.Ilk(e)})),x.add(c,"xSpeed").min(.05).max(5).step(.05).name("X速度").onChange((function(e){d.uniforms.uXSpeed.value=e})),x.add(c,"zSpeed").min(.05).max(5).step(.05).name("Z速度").onChange((function(e){d.uniforms.uZSpeed.value=e})),x.add(c,"noiseSpeed").min(.05).max(5).step(.05).name("噪声速度").onChange((function(e){d.uniforms.uNoiseSpeed.value=e})),x.add(c,"opacity").min(.05).max(1).step(.05).name("透明度").onChange((function(e){d.uniforms.uOpacity.value=e}));var p=new o.SUY,y=function(){d.uniforms.uTime.value=p.getElapsedTime(),m.update(),v.render(t,u),requestAnimationFrame(y)};y(),window.addEventListener("resize",(function(){u.aspect=window.innerWidth/window.innerHeight,u.updateProjectionMatrix(),v.setSize(window.innerWidth,window.innerHeight)}))}},function(e){var n=function(n){return e(e.s=n)};e.O(0,[736,592],(function(){return n(3662),n(8188),n(7633),n(8941)}));e.O()}]);