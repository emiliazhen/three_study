"use strict";(self.webpackChunkthree_study=self.webpackChunkthree_study||[]).push([[618],{1893:function(n,r,e){var t=e(9477),o=e(9365);document.title="".concat(window.location.pathname.slice(1)," 着色器绘制图案");var i=new t.xsS,v=new t.cPb(75,window.innerWidth/window.innerHeight,.1,100);v.position.set(0,0,1),i.add(v);var a=new t._12(1,1,32,32),c=new t.FIo({vertexShader:"precision lowp float;\r\n\r\nattribute vec3 position;\r\nattribute vec2 uv;\r\n\r\nuniform mat4 projectionMatrix;\r\nuniform mat4 viewMatrix;\r\nuniform mat4 modelMatrix;\r\n// 传递过来的时间\r\nuniform float uTime;\r\n\r\n// 传递给片元着色器\r\nvarying vec2 vUv;\r\n\r\nvoid main(){\r\n  vec4 modelPosition =  modelMatrix * vec4( position, 1.0 );\r\n  gl_Position = projectionMatrix * viewMatrix * modelPosition;\r\n  vUv = uv;\r\n}",fragmentShader:"precision lowp float;\r\n\r\n#define PI 3.1415926535897932384626433832795\r\n\r\nuniform float uTime;\r\nvarying vec2 vUv;\r\n\r\n// 随机\r\nfloat random (vec2 st) {\r\n  return fract(sin(dot(st.xy,vec2(12.9898,78.233)))*43758.5453123);\r\n}\r\n// 旋转函数\r\nvec2 rotate(vec2 uv, float rotation, vec2 mid){\r\n  return vec2(cos(rotation) * (uv.x - mid.x) + sin(rotation) * (uv.y - mid.y) + mid.x,cos(rotation) * (uv.y - mid.y) - sin(rotation) * (uv.x - mid.x) + mid.y);\r\n}\r\n\r\n// 噪声函数\r\nfloat noise (in vec2 _st) {\r\n    vec2 i = floor(_st);\r\n    vec2 f = fract(_st);\r\n\r\n    // Four corners in 2D of a tile\r\n    float a = random(i);\r\n    float b = random(i + vec2(1.0, 0.0));\r\n    float c = random(i + vec2(0.0, 1.0));\r\n    float d = random(i + vec2(1.0, 1.0));\r\n\r\n    vec2 u = f * f * (3.0 - 2.0 * f);\r\n\r\n    return mix(a, b, u.x) +\r\n            (c - a)* u.y * (1.0 - u.x) +\r\n            (d - b) * u.x * u.y;\r\n}\r\n\r\n\r\n//\tClassic Perlin 2D Noise \r\n//\tby Stefan Gustavson\r\n//\r\nvec4 permute(vec4 x)\r\n{\r\n    return mod(((x*34.0)+1.0)*x, 289.0);\r\n}\r\n\r\nvec2 fade(vec2 t)\r\n{\r\n    return t*t*t*(t*(t*6.0-15.0)+10.0);\r\n}\r\n\r\nfloat cnoise(vec2 P)\r\n{\r\n    vec4 Pi = floor(P.xyxy) + vec4(0.0, 0.0, 1.0, 1.0);\r\n    vec4 Pf = fract(P.xyxy) - vec4(0.0, 0.0, 1.0, 1.0);\r\n    Pi = mod(Pi, 289.0); // To avoid truncation effects in permutation\r\n    vec4 ix = Pi.xzxz;\r\n    vec4 iy = Pi.yyww;\r\n    vec4 fx = Pf.xzxz;\r\n    vec4 fy = Pf.yyww;\r\n    vec4 i = permute(permute(ix) + iy);\r\n    vec4 gx = 2.0 * fract(i * 0.0243902439) - 1.0; // 1/41 = 0.024...\r\n    vec4 gy = abs(gx) - 0.5;\r\n    vec4 tx = floor(gx + 0.5);\r\n    gx = gx - tx;\r\n    vec2 g00 = vec2(gx.x,gy.x);\r\n    vec2 g10 = vec2(gx.y,gy.y);\r\n    vec2 g01 = vec2(gx.z,gy.z);\r\n    vec2 g11 = vec2(gx.w,gy.w);\r\n    vec4 norm = 1.79284291400159 - 0.85373472095314 * vec4(dot(g00, g00), dot(g01, g01), dot(g10, g10), dot(g11, g11));\r\n    g00 *= norm.x;\r\n    g01 *= norm.y;\r\n    g10 *= norm.z;\r\n    g11 *= norm.w;\r\n    float n00 = dot(g00, vec2(fx.x, fy.x));\r\n    float n10 = dot(g10, vec2(fx.y, fy.y));\r\n    float n01 = dot(g01, vec2(fx.z, fy.z));\r\n    float n11 = dot(g11, vec2(fx.w, fy.w));\r\n    vec2 fade_xy = fade(Pf.xy);\r\n    vec2 n_x = mix(vec2(n00, n01), vec2(n10, n11), fade_xy.x);\r\n    float n_xy = mix(n_x.x, n_x.y, fade_xy.y);\r\n    return 2.3 * n_xy;\r\n}\r\n\r\nvoid main(){\r\n  // ? 无信号\r\n  // float strength = random(vUv);\r\n  // gl_FragColor = vec4(strength, strength, strength, 1.0);\r\n\r\n  // ? 渐变\r\n  // float strength = length(vUv);\r\n  // gl_FragColor = vec4(strength, strength, strength, 1.0);\r\n\r\n  // ? 圆环\r\n  // float strength = step(0.5,distance(vUv,vec2(0.5))+0.35) * (1.0-step(0.5,distance(vUv,vec2(0.5))+0.25));\r\n  // gl_FragColor = vec4(strength, strength, strength, strength);\r\n\r\n  // ? 圆环\r\n  // float strength = 1.0 - step(0.05, abs(distance(vUv,vec2(0.5)) - 0.25));\r\n  // gl_FragColor = vec4(strength, strength, strength, strength);\r\n\r\n  // ? 螺旋手里剑\r\n  // vec2 rUv = rotate(vUv, uTime * 3.0, vec2(0.5));\r\n  // float strength = 0.15 /  distance(vec2(rUv.x,(rUv.y - 0.5) * 5.0 + 0.5), vec2(0.5,0.5)) -1.0 + 0.15 /  distance(vec2(rUv.y,(rUv.x - 0.5) * 5.0 + 0.5), vec2(0.5,0.5)) -1.0;\r\n  // gl_FragColor = vec4(strength, strength, strength, strength);\r\n\r\n  // ? 雷达\r\n  // vec2 rUv = rotate(vUv, -uTime * 3.0, vec2(0.5));\r\n  // float angle = atan(rUv.x - 0.5, rUv.y - 0.5 );\r\n  // float strength = (angle + 3.14) / (PI * 2.0);\r\n  // float alpha = 1.0-step(0.5,distance(vUv,vec2(0.5)));\r\n  // gl_FragColor = vec4(strength, strength, strength, alpha);\r\n\r\n  // ? 万花筒\r\n  // float angle = atan(vUv.x - 0.5, vUv.y - 0.5 ) / (PI * 2.0);\r\n  // float strength = mod(angle * 10.0, 1.0);\r\n  // gl_FragColor = vec4(strength, strength, strength, strength);\r\n\r\n  // ? the book of shaders - Noise噪音， 颜色混合函数\r\n  vec3 greenColor = vec3(1.0, 1.0, 1.0);\r\n  vec3 uvColor = vec3(vUv,1.0);\r\n  float strength = step(0.01,sin(cnoise(vUv * 20.0+ uTime) ));\r\n  vec3 mixColor =  mix(greenColor,uvColor,strength);\r\n  gl_FragColor =vec4(mixColor,1.0);\r\n}",side:t.ehD,transparent:!0,uniforms:{uTime:{value:0}}}),g=new t.Kj0(a,c);i.add(g);var s=new t.CP7;s.setSize(window.innerWidth,window.innerHeight),document.body.appendChild(s.domElement);var d=new o.z(v,s.domElement);d.enableDamping=!0;var l=new t.y8_;i.add(l);var f=new t.SUY,x=function(){c.uniforms.uTime.value=f.getElapsedTime(),d.update(),s.render(i,v),requestAnimationFrame(x)};x(),window.addEventListener("resize",(function(){v.aspect=window.innerWidth/window.innerHeight,v.updateProjectionMatrix(),s.setSize(window.innerWidth,window.innerHeight)}))}},function(n){var r=function(r){return n(n.s=r)};n.O(0,[736,592],(function(){return r(3662),r(8188),r(7633),r(1893)}));n.O()}]);